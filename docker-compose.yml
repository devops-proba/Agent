version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    ports:
      - 8080:8080
    networks:
      - servers
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./gateway/api_gateway.conf:/etc/nginx/api_gateway.conf
      
  product-service:
    build: 
      context: ./product-service
      dockerfile: Dockerfile
      args:
        STAGE: ${STAGE:-dev}
      target: ${TARGET:-appProductRuntime}
    image: nikolina97/product-service:${VERSION:-0.1.0}-${STAGE:-dev}
    container_name: product-service
    restart: on-failure
    networks:
      - servers
    ports:
      - 8081:8080
    environment:
      DATABASE_USERNAME: ${DATABASE_USERNAME:-sa}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-zgadija}
      DATABASE_DOMAIN: ${DATABASE_DOMAIN:-database}
      DATABASE_SCHEMA: ${DATABASE_SCHEMA:-products}
    depends_on: 
      - database
      
  database:
    image: mysql:${MYSQL_VERSION:-8.0.26}
    container_name: mysql
    restart: always
    networks:
      - servers
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_USER: ${MYSQL_USER:-sa}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-zgadija}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-products}
    volumes:
      - database-data:/var/lib/mysql
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql 

  product-frontend:
    build: ./product-frontend
    image: nikolina97/product-frontend
    container_name: product-frontend
    restart: on-failure
    ports:
      - 4200:4200

volumes:
  database-data:
    name: product-database
        
networks:
  servers:
    name: servers
    driver: bridge
